# Author: Philippe Katz <philippe.katz@gmail.com>,
#         Flavien Garcia <flavien.garcia@free.fr>,
#         Sylvain Takerkart <Sylvain.Takerkart@incm.cnrs-mrs.fr>
# License: BSD Style.

try:
    from neuroProcesses import *
except:
    print 'Impossible to import neurProcesses'

def print_fonc(string,context=None):
    """Print function for BrainVISA
 
    Print function for BrainVISA. Desactivated when context is None (for a use in bash mode)

    Parameters
    ----------
    string : str
        The string to print
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    if context is None: # If no context, for a use in BrainVISA shell
        return
    else:
        context.write(_t_(string)) # If used in BrainVISA graphical mode

def warning_fonc(string,context=None):
    """Warning function for BrainVISA

    Warning function for BrainVISA.
    Print :
    * a string in bash when context is None (for a use in bash mode)
    * a warning message in BrainVISA user interface when context is BrainVISA context

    Parameters
    ----------
    string : str
        The string to print
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    if context is None: # If no context, for a use in BrainVISA shell
        print string
    else:
        context.warning(_t_(string)) # If used in BrainVISA graphical mode

def error_fonc(string,context=None):
    """Error function for BrainVISA

    Error function for BrainVISA.
    Print :
    * a string in bash when context is None (for a use in bash mode)
    * a error message in BrainVISA user interface when context is BrainVISA context

    Parameters
    ----------
    string : str
        The string to print
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    if context is None: # If no context, for a use in BrainVISA shell
        print string
        
    else:
        context.error(_t_(string)) # If used in BrainVISA graphical mode

def interruption( context ):
    """Interruption function for BrainVISA

    Interruption function of a script for BrainVISA. Stops the current process.

    Parameters
    ----------
    context : brainvisa context
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    if context is None: # If no context, for a use in BrainVISA shell
        return
    else:
        context.checkInterruption( ) # If used in BrainVISA graphical mode

try:
    import oisession #Import of session-level class for optical imaging
except:
    import oidata.oisession as oisession #Import of session-level class for optical imaging


def create_physio_params_file_process( database,protocol,subject,session, raw_physio_file_input, mode = False, context=None ,script=False):
    """Creates the file containing the frequency and phase values for physiological variables (heartbeat and
    respiration) which are estimated externally

    It is read to define a trial-specific design matrix from the session design matrix.

    Parameters
    ----------
    raw_physio_file_input : str
        path of the raw unimported file containing the physio parameters
    database : str
        Database's path
    protocol : str
        Protocol's name
    sujet : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date.
    mode : bool, optional
        The database mode
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    script : script context, optional
        If True (i.e. when called from a script), avoid to apply update_database to speed up the process

    Returns
    -------
    path : str
        Physio file's path
    """
    print_fonc("Initialization",context)
    this_session = oisession.OiSession( database,protocol,subject,session ) # OiSession instance initialization

    print_fonc("Creation of the condition file",context)
    # Creation of the file containing the physiological params
    physio_param_fname = this_session.create_physio_params_file_func(raw_physio_file_input)

    if context == None and mode == True and script == False: # For a use in BrainVISA shell, in database mode
        this_session.update_database() # Updating database
    
    return physio_param_fname


def create_trials_conds_file_process( database,protocol,subject,session, mode = False, context=None ,script=False):
    """Creates the conditions file

    Creates a condition file, containing the paths of datas and their conditions of experimentation. It is read to perform the session-level processes

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    subject : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date.
    mode : bool, optional
        The database mode
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    script : script context, optional
        If True, avoid to apply update_database in a script function to don't
        slow execution
        
    Returns
    -------
    path : str
        Condition file's path
    """
    print_fonc("Initialization",context)
    this_session = oisession.OiSession( database,protocol,subject,session ) # OiSession instance initialization

    print_fonc("Creation of the condition file",context)
    path = this_session.create_trials_conds_file_func() # Condition file creation

    if context == None and mode == True and script == False: # For a use in BrainVISA shell, in database mode
        this_session.update_database() # Updating database
    
    return path
    
def spectral_analysis_process( database,protocol,subject,session,analysis,conditions, corner0=None, corner1=None, path_mask=None, format='.nii', data_graph='~/',context=None):
    """Calculate the mean of spectrums of each trial and save a data graph

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    subject : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date.
    analysis : str
        Analysis' directory
    conditions : tuple of list
        A tuple of list of condition which has to be averaged
        Exemple :
        ([5,2]) The files which have for condtions 5 and 2 will be averaged together.
    corner0 : int tuple, optional
        Top left-hand corner
    corner1 : int tuple, optional
        Bottom right-hand corner
    path_mask : str, optional
        Path of binary mask
    format : {'.nii','.nii.gz'}
        Saving format of images. It can be NIFTI-1 Image ('.nii') or gzip compressed NIFTI-1 Image ('.nii.gz')
    data_graph : str
        Path of the data graph created
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """  
    print_fonc("Initialization",context)
    mySAP = oisession.OiSession(database,protocol,subject,session,format=format) # OiSession instance initialization
    
    print_fonc("Create file list for getting averaged spectrum",context)
    mySAP.create_filelist_for_averaging(analysis,conditions)
    mySAP.spectrums_list=mySAP.paths_list_list_for_averaging[0]
    
    mySAP.load_averaged_img(path=mySAP.spectrums_list[0]) # Loads an existing session averaged image

    if path_mask == None:                                  
        mySAP.create_rectangle_mask(corner0, corner1) # Creates a rectangle mask which defines the region to average
    else:
        print_fonc("Loading mask",context)
        db_fit=mySAP.load_mask(path=path_mask) # Loads an existing mask
        if db_fit[0]==-1: # Writes an error message and stops the current process if the path does not exist
            error_fonc("Path does not exist",context)
    
    print_fonc("Creation of the spectrums data and average",context)
    mySAP.create_and_average_spectrum_datas() # Spectrums data recovery
                                                   
    print_fonc("Creation of the spectral analysis graph",context)                                        
    mySAP.create_spectral_analysis_graph(mySAP.period) # Creates data graph
    
    print_fonc("Writing on disk : spectral analysis graph", context)
    mySAP.save_data_graph(data_graph) # Saves data graph as PNG image    

    print_fonc("Spectral analysis graph saved => Viewer available",context)
    
def tau_and_heartbeat_frequency_estimation_process( database,protocol,subject,session,analysis,conditions,tau_max,corner0=None, corner1=None, path_mask=None, format='.nii', data_graph='~/',context=None):
    """Estimate the time constant 'tau' of the dye bleaching and
    the heartbeat frequency to construct the Linear Model using the
    Nelder-Mead simplex direct search method.
    Save an histogram of the results.

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    subject : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date.
    analysis : str
        Analysis' directory
    conditions : tuple of list
        A tuple of list of condition which has to be averaged
        Exemple :
        ([5,2]) The files which have for condtions 5 and 2 will be averaged together.
    tau_max : float
        Maximum tau value for estimation
    corner0 : int tuple, optional
        Top left-hand corner
    corner1 : int tuple, optional
        Bottom right-hand corner
    path_mask : str, optional
        Path of binary mask
    format : {'.nii','.nii.gz'}
        Saving format of images. It can be NIFTI-1 Image ('.nii') or gzip compressed NIFTI-1 Image ('.nii.gz')
    data_graph : str
        Path of the data graph created
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """  
    print_fonc("Initialization",context)
    mySAP = oisession.OiSession(database,protocol,subject,session,format=format) # OiSession instance initialization
    
    print_fonc("Create file list for estimating",context)
    mySAP.create_filelist_for_averaging(analysis,conditions)  
    mySAP.trials_list=mySAP.paths_list_list_for_averaging[0]
    
    mySAP.load_averaged_img(path=mySAP.trials_list[0]) # Loads an existing session averaged image

    if path_mask == None:                                  
        mySAP.create_rectangle_mask(corner0, corner1) # Creates a rectangle mask which defines the region to average
    else:
        print_fonc("Loading mask",context)
        db_fit=mySAP.load_mask(path=path_mask) # Loads an existing mask
        if db_fit[0]==-1: # Writes an error message and stops the current process if the path does not exist
            error_fonc("Path does not exist",context)
    
    print_fonc("Estimation of the the time constant 'tau' and the heartbeat frequency",context)
    mySAP.estimate_tau_and_heartbeat_frequency(tau_max=tau_max) # Spectrums data recovery
                                                   
    print_fonc("Creation of the fit results graph",context)                                        
    mySAP.create_fit_results_graph(tau_max) # Creates data graph
    
    print_fonc("Writing on disk : Fit results graph", context)
    mySAP.save_data_graph(data_graph) # Saves data graph as PNG image    

    print_fonc("Fit results graph saved => Viewer available",context)
    
def construct_model_process( database, protocol, subject, session, param, pathX=None, pathParam=None, analysis=None, mode=False,context=None,script=False ):
    """Creates the matrix of regressors

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    subject : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date.
    param : tuple or str
        str or tuple
            The parameters used to create the Linear Model.
            It can be : a str, in case of the parameters are loaded from an existing file, param is the path of this file, or a tuple, in case of the parameters are set manually.
              param is a tuple which contains :

              0. The sampling frequency,
              1. The trial duration,
              2. The time constant of dye bleaching,
              3. The frequencies of environmental and physiological noises (a list),
              4. The fourier orders of environmental and physiological noises (a list, must have the same lenght as point 3),
              5. The number of regressors kept to create the Linear Model,
              6. The time-range parameters (minima),
              7. The time-range parameters (maxima, must have the same lenght as point 6),
    pathX : str, optional
        The path where to save the model definition
    pathParam : str, optional
        The path where to save the parameters
    analysis : str, optional
        The name of the analysis directory
    mode : bool, optional
        The database mode
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    script : script context, optional
        If True, avoid to apply update_database in a script function to don't
        slow execution
        
    Returns
    -------
    output_paths : dict
        A dictionary containing datas paths attributes :
        'path_def'
            (The path where is saved the model definition),
        'path_param'
            (The path where are saved the parameters)
    """
    print_fonc('Initialization',context)

    this_session=oisession.OiSession( database, protocol, subject, session, database_mode=mode ) # OiSession instance initialization

    print_fonc("Reading data",context)

    this_session.set_model_parameters( param ) # Setting model parameters

    print_fonc('Construction of the linear model',context)

    this_session.create_model_definition(pathX) # Creation of Linear Model

    print_fonc('Writing on disk : X and example-shapes file',context)

    (db_fit,path_def)=this_session.save_model_definition( analysis, pathX ) # Saving Linear Model definition

    if db_fit == -1:
        warning_fonc("Output path doesn't correspond to any database",context) # Writes a warning message if the path does not correspond to the path created by the database mode

    print_fonc("Writing on disk : parameters",context)
    (db_fit,path_param)=this_session.save_model_parameters( analysis, pathParam ) # Saving parameters

    if context == None and mode == True and script == False:
        this_session.update_database() # Updating database

    if db_fit == -1:
        warning_fonc("Output path doesn't correspond to any database",context) # Writes a warning message if the path does not correspond to the path created by the database mode

    output_paths = {"path_def":path_def,"path_param":path_param}
    return output_paths
