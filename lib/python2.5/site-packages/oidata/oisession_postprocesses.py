# Author: Philippe Katz <philippe.katz@gmail.com>,
#         Flavien Garcia <flavien.garcia@free.fr>,
#         Sylvain Takerkart <Sylvain.Takerkart@incm.cnrs-mrs.fr>
# License: BSD Style.

try:
    from neuroProcesses import *
except:
    print 'Impossible to import neurProcesses'

def print_fonc(string,context=None):
    """Print function for BrainVISA
 
    Print function for BrainVISA. Desactivated when context is None (for a use in bash mode)

    Parameters
    ----------
    string : str
        The string to print
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    if context is None: # If no context, for a use in BrainVISA shell
        return
    else:
        context.write(_t_(string)) # If used in BrainVISA graphical mode

def warning_fonc(string,context=None):
    """Warning function for BrainVISA

    Warning function for BrainVISA.
    Print :
    * a string in bash when context is None (for a use in bash mode)
    * a warning message in BrainVISA user interface when context is BrainVISA context

    Parameters
    ----------
    string : str
        The string to print
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    if context is None: # If no context, for a use in BrainVISA shell
        print string
    else:
        context.warning(_t_(string)) # If used in BrainVISA graphical mode

def error_fonc(string,context=None):
    """Error function for BrainVISA

    Error function for BrainVISA.
    Print :
    * a string in bash when context is None (for a use in bash mode)
    * a error message in BrainVISA user interface when context is BrainVISA context

    Parameters
    ----------
    string : str
        The string to print
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    if context is None: # If no context, for a use in BrainVISA shell
        print string
        
    else:
        context.error(_t_(string)) # If used in BrainVISA graphical mode

def interruption( context ):
    """Interruption function for BrainVISA

    Interruption function of a script for BrainVISA. Stops the current process.

    Parameters
    ----------
    context : brainvisa context
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    if context is None: # If no context, for a use in BrainVISA shell
        return
    else:
        context.checkInterruption( ) # If used in BrainVISA graphical mode

try:
    import oisession #Import of session-level class for optical imaging
except:
    import oidata.oisession as oisession #Import of session-level class for optical imaging

def average_trials_process( database,protocol,subject,session,analysis,conditions,format='.nii',blank_based_suffix='',mode=False, context=None, script=False ):
    """Averages a list of images 
    It uses the condition file to average a list of image, using their paths

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    subject : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date
    analysis : str
        Analysis' directory
    conditions : tuple of list
        A tuple of list of condition which has to be averaged
        Exemple :
        ([5,2],[4]) The files which have for condtions 5 and 2 will be averaged together, the files which have for condition 4 will be averaged together.
    format : {'.nii','.nii.gz'}, optional
        Saving format of images. It can be NIFTI-1 Image ('.nii') or gzip compressed NIFTI-1 Image ('.nii.gz')
    blank_based_suffix : str, optional
        The suffix of images' filename. Gives the processing algorithmes applied on this image. It can be the concatenation of:
        '_f0d' for frame0 division,
        '_f0s' for frame0 subtraction,
        '_d' for linear detrend,
        '_bks' for blank subtraction,
        '_bkd' for blank division
    mode : bool, optional
        The database mode
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    script : script context, optional
        If True, avoid to apply update_database in a script function to don't
        slow execution

    Returns
    -------
    path : str
        The path where the mask is saved
    """
    print_fonc("Initialization",context)
    this_session=oisession.OiSession( database,protocol,subject,session,format=format ) # OiSession instance initialization
    #print_fonc(conditions,context)
    file_exist=this_session.create_filelist_for_averaging(analysis,conditions,blank_based_suffix) # Creates the list of images paths which will be used for session averaging

    if file_exist==-1: # Writes an error message and stops the current process if the path does not exist
        error_fonc("No file",context)

    print_fonc("Processing average",context)
    this_session.average_trials() # Averages a list of images paths

    print_fonc("Writing on disk",context)
    path=this_session.save_averaged(analysis,format) # Saves the averaged images
     
    if mode == True and script == False:
        this_session.update_database() # Updating database

    return path

def average_region_process( database,protocol,subject,session,analysis,filename, corner0, corner1, path_mask=None, format='.nii',mode=False,context=None ):
    """Averages a region of an image

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    subject : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date
    analysis : str
        Analysis' directory
    filename : str
        The path of the image to average
    corner0 : tuple
        The position of the left-head coin of the mask (x,y)
    corner1 : tuple
        The position of the left-bottom coin of the mask (x,y)
    path_mask : str, optional
        The path of an existing mask
    format : {'.nii','.nii.gz'}, optional
        Saving format of images. It can be NIFTI-1 Image ('.nii') or gzip compressed NIFTI-1 Image ('.nii.gz')
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode

    Returns
    -------
    averaged_region : numpy vector
        The time serie resulting from the averaging of a region of interest
    path : str
        The path of the time serie
    """
    print_fonc("Initialization",context)
    Av=oisession.OiSession(database,protocol,subject,session,database_mode=mode) # OiSession instance initialization
    
    print_fonc("Reading data",context)
    Av.load_averaged_img( analysis,filename ) # Loads an existing session averaged image

    if path_mask == None: # If no mask defined, mask creation
        print_fonc("Mask creation",context)
        mask = Av.create_rectangle_mask( corner0, corner1 ) # Creates a rectangle mask which defines the region to average

    else:
        print_fonc("Loading mask",context)
        db_fit=Av.load_mask(path_mask) # Loads an existing mask
        if db_fit[0]==-1: # Writes an error message and stops the current process if the path does not exist
            error_fonc("Path does not exist",context)

    print_fonc("Processing average",context)
    aver=Av.average_region() # Averages a region of an image

    if path_mask == None:
        print_fonc("Writing on disk",context)
        (db_fit,path) = Av.save_mask() # Saves the mask in vsdi_data

        if db_fit == -1:
            warning_fonc("Output path doesn't correspond to any database",context) # Writes a warning message if the path does not correspond to the path created by the database mode

    (db_fit,path) = Av.save_averaged_region( analysis )

    if context == None and mode == True:
        Av.update_database() # Updating database

    if db_fit == -1:
        warning_fonc("Output path doesn't correspond to any database",context) # Writes a warning message if the path does not correspond to the path created by the database mode

    return (Av.averaged_region,path)

def durbin_watson_test_process(database,protocol,subject,session,analysis,conditions, corner0=None, corner1=None, path_mask=None, format='.nii', data_graph='~/',context=None):
    """Apply Durbin-Watson test on each residuals file and save an histogram of results

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    subject : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date.
    analysis : str
        Analysis' directory
    conditions : tuple of list
        A tuple of list of condition which has to be averaged
        Exemple :
        ([5,2]) The files which have for condtions 5 and 2 will be averaged together.
    corner0 : int tuple, optional
        Top left-hand corner
    corner1 : int tuple, optional
        Bottom right-hand corner
    path_mask : str, optional
        Path of binary mask
    format : {'.nii','.nii.gz'}
        Saving format of images. It can be NIFTI-1 Image ('.nii') or gzip compressed NIFTI-1 Image ('.nii.gz')
    data_graph : str
        Path of the data graph created
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    print_fonc("Initialization",context)
    myDWTP = oisession.OiSession(database,protocol,subject,session,format=format) # OiSession instance initialization
    
    print_fonc("Create residuals file list",context)
    myDWTP.create_filelist_for_averaging(analysis,conditions,'_residuals') 
    myDWTP.residuals_list=myDWTP.paths_list_list_for_averaging[0]
    
    print_fonc("Create betas file list",context)
    myDWTP.create_filelist_for_averaging(analysis,conditions,'_betas')
    myDWTP.betas_list=myDWTP.paths_list_list_for_averaging[0]
    
    myDWTP.load_averaged_img(path=myDWTP.residuals_list[0]) # Loads an existing session averaged image

    if path_mask == None:                                  
        myDWTP.create_rectangle_mask(corner0, corner1) # Creates a rectangle mask which defines the region to average
    else:
        print_fonc("Loading mask",context)
        db_fit=myDWTP.load_mask(path=path_mask) # Loads an existing mask
        if db_fit[0]==-1: # Writes an error message and stops the current process if the path does not exist
            error_fonc("Path does not exist",context)
    
    print_fonc("Creation of d values and average",context)
    myDWTP.create_and_average_d_values() # Spectrums data recovery
                                                   
    print_fonc("Creation of the Durbin-Watson test graph",context)                                        
    myDWTP.create_durbin_watson_results_graph() # Creates data graph
    
    print_fonc("Writing on disk : Durbin-Watson test graph", context)
    myDWTP.save_data_graph(data_graph) # Saves data graph as PNG image    

    print_fonc("Spectral analysis graph saved => Viewer available",context)  
    
def comparison_of_rois_process(database,protocol,subject,session,analysis,conditions, blank_based_suffix, rois_list, format='.nii', data_graph='~/',context=None):
    """Plot means of one analysis over several ROIs

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    subject : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date.
    analysis : str
        Analysis' directory
    conditions : tuple of list
        A tuple of list of condition which has to be averaged
        Exemple :
        ([5,2]) The files which have for condtions 5 and 2 will be averaged together.
    blank_based_suffix : str, optional
        The suffix of images' filename. Gives the processing algorithmes applied on this image. It can be the concatenation of:
        '_f0d' for frame0 division,
        '_f0s' for frame0 subtraction,
        '_d' for linear detrend,
        '_bks' for blank subtraction,
        '_bkd' for blank division
    rois_list : list
        List of different ROIs which can be tuple of two corners (int tuple)
        or binary mask path (str)
    format : {'.nii','.nii.gz'}
        Saving format of images. It can be NIFTI-1 Image ('.nii') or gzip compressed NIFTI-1 Image ('.nii.gz')
    data_graph : str
        Path of the data graph created
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
        
    Raises
    ------
    ValueError
        If ROIs list is empty
    """
    # Parameters recovery
    if rois_list != []:
        rois_list=rois_list
    else:
        raise ValueError('ROIs list is empty')
    
    print_fonc("Initialization",context)
    myCORP = oisession.OiSession(database,protocol,subject,session,format=format) # OiSession instance initialization
    
    print_fonc("Create trials list",context)
    myCORP.create_filelist_for_averaging(analysis,conditions,blank_based_suffix) 
    myCORP.trials_list=myCORP.paths_list_list_for_averaging[0]
    
    print_fonc("Average trials on each ROI\nPlease waiting ...",context)
    myCORP.average_trials_on_rois(rois_list)

    print_fonc("Group averaged trials by ROI",context)      
    myCORP.group_trials_by_roi(rois_list)
                                             
    print_fonc("Creation of the comparison of ROIs graph",context)                                        
    myCORP.trace_comparison_of_rois_graph() # Creates data graph
    
    print_fonc("Writing on disk : Comparison of ROIs graph", context)
    myCORP.save_data_graph(data_graph) # Saves data graph as PNG image    

    print_fonc("Comparison of ROIs graph saved => Viewer available",context) 
    
def comparison_of_analyses_process(attributes_list, corner0=None, corner1=None,path_mask=None, format='.nii', data_graph='~/',context=None):
    """Plot mean of several analysis over a same ROI

    Parameters
    ----------
    attributes_list : dict list
        List of dict which include different hierarchy attributes:
            database : str
                Database's path
            protocol : str
                Protocol's name
            subject : str
                Subject's name
            session : str
                Session directory. Given by the prefix "session_" and the session date.
            analysis : str
                Analysis' directory
            conditions : tuple of list
                A tuple of list of condition which has to be averaged
            blank_based_suffix : str, optional
                The suffix of images' filename. Gives the processing algorithmes applied on this image. It can be the concatenation of:
                    '_f0d' for frame0 division,
                    '_f0s' for frame0 subtraction,
                    '_d' for linear detrend,
                    '_bks' for blank subtraction,
                    '_bkd' for blank division
            
            Exemple :
                ([5,2]) The files which have for condtions 5 and 2 will be averaged together.
    corner0 : int tuple, optional
        Top left-hand corner
    corner1 : int tuple, optional
        Bottom right-hand corner
    path_mask : str, optional
        Path of binary mask
    format : {'.nii','.nii.gz'}
        Saving format of images. It can be NIFTI-1 Image ('.nii') or gzip compressed NIFTI-1 Image ('.nii.gz')
    data_graph : str
        Path of the data graph created
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    # Parameters recovery
    path_mask=path_mask
    
    print_fonc("Initialization",context)
    myCOAP = oisession.OiSession(attributes_list[0]['_database'],attributes_list[0]['protocol'],attributes_list[0]['subject'],'session_'+attributes_list[0]['session_date'],format=format) # OiSession instance initialization
    
    print_fonc("Recovery of all path of each analysis",context)
    myCOAP.analysis_list=[]
    myCOAP.leg_names=[]
    for a in range(len(attributes_list)):
        print_fonc("Create trials list for analysis number"+str(a),context)
        myCOAP.create_filelist_for_averaging(attributes_list[a]['analysis_name'],attributes_list[a]['conditions_list'],attributes_list[a]['blank_based_suffix'])         
        myCOAP.analysis_list.append(myCOAP.paths_list_list_for_averaging[0])
        myCOAP.leg_names.append(attributes_list[a]['analysis_name']+str(attributes_list[a]['conditions_list']))

    myCOAP.load_averaged_img(path=myCOAP.analysis_list[0][0]) # Loads an existing session averaged image

    if path_mask == None:                                  
        myCOAP.create_rectangle_mask(corner0, corner1) # Creates a rectangle mask which defines the region to average
    else:
        print_fonc("Loading mask",context)
        db_fit=myCOAP.load_mask(path=path_mask) # Loads an existing mask
        if db_fit[0]==-1: # Writes an error message and stops the current process if the path does not exist
            error_fonc("Path does not exist",context)    
            
    print_fonc("Average trials of each analysis\nPlease waiting ...",context)
    myCOAP.average_trials_of_each_analysis()

    print_fonc("Group averaged trials by analysis",context)      
    myCOAP.group_trials_by_analysis()
                                             
    print_fonc("Creation of the comparison of analysis graph",context)                                        
    myCOAP.trace_comparison_of_analysis_graph() # Creates data graph
    
    print_fonc("Writing on disk : Comparison of analysis graph", context)
    myCOAP.save_data_graph(data_graph) # Saves data graph as PNG image    

    print_fonc("Comparison of analysis graph saved => Viewer available",context)
    
def visualization_of_trials_variability_process(database,protocol,subject,session,analysis,conditions,blank_based_suffix, roi=[(None,None)], format='.nii', data_graph='~/',context=None):
    """Plot mean of several analysis over a same ROI

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    subject : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date.
    analysis : str
        Analysis' directory
    conditions : tuple of list
        A tuple of list of condition which has to be averaged
        Exemple :
        ([5,2]) The files which have for condtions 5 and 2 will be averaged together.
    blank_based_suffix : str, optional
        The suffix of images' filename. Gives the processing algorithmes applied on this image. It can be the concatenation of:
        '_f0d' for frame0 division,
        '_f0s' for frame0 subtraction,
        '_d' for linear detrend,
        '_bks' for blank subtraction,
        '_bkd' for blank division
    roi : int tuple tuple or str, optional
        ROI which can be tuple of two corners (int tuple)
        or binary mask path (str)
    format : {'.nii','.nii.gz'}
        Saving format of images. It can be NIFTI-1 Image ('.nii') or gzip compressed NIFTI-1 Image ('.nii.gz')
    data_graph : str
        Path of the data graph created
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """ 
    print_fonc("Initialization",context)
    myCOCP = oisession.OiSession(database,protocol,subject,session,format=format) # OiSession instance initialization

    # Parameters recovery
    roi=roi
    
    if  blank_based_suffix=='':
        myCOCP.color='r' # Recovery of model color
    elif  blank_based_suffix=='_f0d_bks':
        myCOCP.color='b' # Recovery of model color
    elif  blank_based_suffix=='_f0d_bks_d':
        myCOCP.color='g' # Recovery of model color   
    print_fonc("Create trials list",context)
    myCOCP.create_filelist_for_averaging(analysis,conditions,blank_based_suffix)
    myCOCP.trials_list=myCOCP.paths_list_list_for_averaging[0]
    
    print_fonc("Average trials on the ROI\nPlease waiting ...",context)
    myCOCP.average_trials_on_rois(roi)
                                             
    print_fonc("Creation of the comparison of trials graph",context)                                        
    myCOCP.trace_trials_variability_graph() # Creates data graph
    
    print_fonc("Writing on disk : Comparison of trials graph", context)
    myCOCP.save_data_graph(data_graph) # Saves data graph as PNG image    

    print_fonc("Comparison of trials graph saved => Viewer available",context) 
