# Author: Philippe Katz <philippe.katz@gmail.com>,
#         Sylvain Takerkart <Sylvain.Takerkart@incm.cnrs-mrs.fr>
# License: BSD Style.

def print_fonc(string,context=None):
    """Print function for BrainVISA
 
    Print function for BrainVISA. Desactivated when context is None (for a use in bash mode)

    Parameters
    ----------
    string : str
        The string to print
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    if context is None: # If no context, for a use in BrainVISA shell
        return
    else:
        context.write(_t_(string)) # If used in BrainVISA graphical mode

def warning_fonc(string,context=None):
    """Warning function for BrainVISA

    Warning function for BrainVISA.
    Print :
    * a string in bash when context is None (for a use in bash mode)
    * a warning message in BrainVISA user interface when context is BrainVISA context

    Parameters
    ----------
    string : str
        The string to print
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    if context is None: # If no context, for a use in BrainVISA shell
        print string
    else:
        context.warning(_t_(string)) # If used in BrainVISA graphical mode

def error_fonc(string,context=None):
    """Error function for BrainVISA

    Error function for BrainVISA.
    Print :
    * a string in bash when context is None (for a use in bash mode)
    * a error message in BrainVISA user interface when context is BrainVISA context

    Parameters
    ----------
    string : str
        The string to print
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    if context is None: # If no context, for a use in BrainVISA shell
        print string
        
    else:
        context.error(_t_(string)) # If used in BrainVISA graphical mode

def interruption( context ):
    """Interruption function for BrainVISA

    Interruption function of a script for BrainVISA. Stops the current process.

    Parameters
    ----------
    context : brainvisa context
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode
    """
    if context is None: # If no context, for a use in BrainVISA shell
        return
    else:
        context.checkInterruption( ) # If used in BrainVISA graphical mode

import oidata.oisession as oisession #Import of session-level class for optical imaging

def create_trials_conds_file_process( database,protocol,subject,session, mode = False, context=None ):
    """Creates the conditions file

    Creates a condition file, containing the paths of datas and their conditions of experimentation. It is read to perform the session-level processes

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    sujet : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date.
    mode : bool, optional
        The database mode
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode

    Returns
    -------
    path : str
        Condition file's path
    """
    print_fonc("Initialization",context)
    this_session = oisession.OiSession( database,protocol,subject,session ) # OiSession instance initialization

    print_fonc("Creation of the condition file",context)
    path = this_session.create_trials_conds_file_func() # Condition file creation

    if context == None and mode == True: # For a use in BrainVISA shell, in database mode
        this_session.update_database() # Updating database
    
    return path

def construct_model_process( database, protocol, subject, session, param, pathX=None, pathParam=None, analysis=None, mode=False,context=None ):
    """Creates the matrix of regressors

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    sujet : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date.
    param : tuple or str
        str or tuple
            The parameters used to create the Linear Model.
            It can be : a str, in case of the parameters are loaded from an existing file, param is the path of this file, or a tuple, in case of the parameters are set manually.
              param is a tuple which contains :

              0. The sampling frequency,
              1. The trial duration,
              2. The time constant of dye bleaching,
              3. The frequencies of environmental and physiological noises (a list),
              4. The fourier orders of environmental and physiological noises (a list, must have the same lenght as point 3),
              5. The number of regressors kept to create the Linear Model,
              6. The time-range parameters (minima),
              7. The time-range parameters (maxima, must have the same lenght as point 6),
    pathX : str, optional
        The path where to save the model definition
    pathParam : str, optional
        The path where to save the parameters
    analysis : str, optional
        The name of the analysis directory
    mode : bool, optional
        The database mode
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode

    Returns
    -------
    output_paths : dict
        A dictionary containing datas paths attributes :
        'path_def'
            (The path where is saved the model definition),
        'path_param'
            (The path where are saved the parameters)
    """
    print_fonc('Initialization',context)

    this_session=oisession.OiSession( database, protocol, subject, session, database_mode=mode ) # OiSession instance initialization

    print_fonc("Reading data",context)

    this_session.set_model_parameters( param ) # Satting model parameters

    print_fonc('Construction of the linear model',context)

    this_session.create_model_definition() # Creation of Linear Odel

    print_fonc('Writing on disk : X',context)

    (db_fit,path_def)=this_session.save_model_definition( analysis, pathX ) # Saving Linear Model definition

    if db_fit == -1:
        warning_fonc("Output path doesn't correspond to any database",context) # Writes a warning message if the path does not correspond to the path created by the database mode

    print_fonc("Writing on disk : parameters",context)
    (db_fit,path_param)=this_session.save_model_parameters( analysis, pathParam ) # Saving parameters

    if context == None and mode == True:
        this_session.update_database() # Updating database

    if db_fit == -1:
        warning_fonc("Output path doesn't correspond to any database",context) # Writes a warning message if the path does not correspond to the path created by the database mode

    output_paths = {"path_def":path_def,"path_param":path_param}
    return output_paths

def average_trials_process( database,protocol,subject,session,analysis,conditions,format='.nii',suffixe='',mode=False, context=None ):
    """Averages a list of images

    ...
  
    It uses the condition file to average a list of image, using their paths

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    subject : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date
    analysis : str
        Analysis' directory
    conditions : tuple of list
        A tuple of list of condition which has to be averaged
        Exemple :
        ([5,2],[4,]) The files which have for condtions 5 and 2 will be averaged together, the files which have for condition 4 will be averaged together.
    format : {'.nii','.nii.gz'}, optional
        Saving format of images. It can be NIFTI-1 Image ('.nii') or gzip compressed NIFTI-1 Image ('.nii.gz')
    suffixe : str, optional
        The suffixe of images' filename. Gives the processing algorithmes applied on this image. It can be :
        '_f0d' for frame0 division,
        '_f0s' for frame0 substraction,
        '_d' for linear detrend,
        '_bks' for blank substraction,
        '_bkd' for blank division,
    mode : bool, optional
        The database mode
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode

    Returns
    -------
    path : str
        The path where the mask is saved
    """
    print_fonc("Initialization",context)
    this_session=oisession.OiSession( database,protocol,subject,session,format=format ) # OiSession instance initialization
    #print_fonc(conditions,context)
    file_exist=this_session.create_filelist_for_averaging(analysis,conditions,suffixe) # Creates the list of images paths which will be used for session averaging

    if file_exist==-1: # Writes an error message and stops the current process if the path does not exist
        error_fonc("No file",context)

    print_fonc("Processing average",context)
    this_session.average_trials() # Averages a list of images paths

    print_fonc("Writing on disk",context)
    path=this_session.save_averaged(analysis,format) # Saves the averaged images
 
    this_session.update_database() # Updating database

    return path

def average_region_process( database,protocol,subject,session,analysis,filename, corner0, corner1, path_mask=None, format='.nii',mode=False,context=None ):
    """Averages a region of an image

    Parameters
    ----------
    database : str
        Database's path
    protocol : str
        Protocol's name
    subject : str
        Subject's name
    session : str
        Session directory. Given by the prefix "session_" and the session date
    analysis : str
        Analysis' directory
    filename : str
        The path of the image to average
    corner0 : tuple
        The position of the left-head coin of the mask (x,y)
    corner1 : tuple
        The position of the left-bottom coin of the mask (x,y)
    path_mask : str, optional
        The path of an existing mask
    format : {'.nii','.nii.gz'}, optional
        Saving format of images. It can be NIFTI-1 Image ('.nii') or gzip compressed NIFTI-1 Image ('.nii.gz')
    context : brainvisa context, optional
        Can be None for a use in bash mode or the BrainVISA context for a use in BrainVISA graphical mode

    Returns
    -------
    averaged_region : numpy vector
        The time serie resulting from the averaging of a region of interest
    path : str
        The path of the time serie
    """
    print_fonc("Initialization",context)
    Av=oisession.OiSession(database,protocol,subject,session,database_mode=mode) # OiSession instance initialization

    print_fonc("Reading data",context)
    Av.load_averaged_img( analysis,filename ) # Loads an existing session averaged image

    if path_mask == None: # If no mask defined, mask creation
        print_fonc("Mask creation",context)
        mask = Av.create_rectangle_mask( corner0, corner1 ) # Creates a rectangle mask which defines the region to average

    else:
        print_fonc("Loading mask",context)
        db_fit=Av.load_mask(path_mask) # Loads an existing mask
        if db_fit[0]==-1: # Writes an error message and stops the current process if the path does not exist
            error_fonc("Path does not exist",context)

    print_fonc("Processing average",context)
    aver=Av.average_region() # Averages a region of an image

    if path_mask == None:
        print_fonc("Writing on disk",context)
        (db_fit,path) = Av.save_mask() # Saves the mask in vsdi_data

        if db_fit == -1:
            warning_fonc("Output path doesn't correspond to any database",context) # Writes a warning message if the path does not correspond to the path created by the database mode

    (db_fit,path) = Av.save_averaged_region( analysis )

    if context == None and mode == True:
        Av.update_database() # Updating database

    if db_fit == -1:
        warning_fonc("Output path doesn't correspond to any database",context) # Writes a warning message if the path does not correspond to the path created by the database mode

    return (Av.averaged_region,path)

